# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ApiTitle
  class TagsAndTaggingLongTitleController < BaseController
    @@instance = TagsAndTaggingLongTitleController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Get a list of bars
    # @return List of String response from the API call
    def get_tags

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/tags'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return decoded
    end

    # Get a single tag
    # @param [String] id Required parameter: Unique tag identifier
    # @return Mixed response from the API call
    def get_get_one_tag(id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/tags/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end
  end
end
