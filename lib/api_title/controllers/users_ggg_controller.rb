# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module ApiTitle
  class UsersGggController < BaseController
    @@instance = UsersGggController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Get a list of users. Example:
    # ```no-highlight
    # https://api.mywebsite.com/users?sort=joined&limit=5
    # ```
    # @param [String] name Optional parameter: Search for a user by name
    # @param [String] joined_before Optional parameter: Search by join date
    # @param [String] joined_after Optional parameter: Search by join date
    # @param [SortEnum] sort Optional parameter: Which field to sort by
    # @param [Integer] limit Optional parameter: The maximum number of users to return, up to `50`
    # @return List of GetUsersResponse response from the API call
    def get_users(name = nil,
                  joined_before = nil,
                  joined_after = nil,
                  sort = SortEnum::NAME,
                  limit = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/users'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'name' => name,
        'joinedBefore' => joined_before,
        'joinedAfter' => joined_after,
        'sort' => sort,
        'limit' => limit
      }, array_serialization: Configuration.array_serialization
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return decoded.map{|element| GetUsersResponse.from_hash(element)}
    end
  end
end
