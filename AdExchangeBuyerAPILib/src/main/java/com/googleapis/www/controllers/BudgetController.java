/*
 * AdExchangeBuyerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.googleapis.www.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.googleapis.www.*;
import com.googleapis.www.models.*;
import com.googleapis.www.exceptions.*;
import com.googleapis.www.http.client.HttpClient;
import com.googleapis.www.http.client.HttpContext;
import com.googleapis.www.http.request.HttpRequest;
import com.googleapis.www.http.response.HttpResponse;
import com.googleapis.www.http.response.HttpStringResponse;
import com.googleapis.www.http.client.APICallBack;

public class BudgetController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static BudgetController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the BudgetController class 
     */
    public static BudgetController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new BudgetController();
            }
        }
        return instance;
    }

    /**
     * Returns the budget information for the adgroup specified by the accountId and billingId.
     * @param    accountId    Required parameter: The account id to get the budget information for.
     * @param    billingId    Required parameter: The billing id to get the budget information for.
     * @param    alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
     * @param    fields    Optional parameter: Selector specifying which fields to include in a partial response.
     * @param    key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param    oauthToken    Optional parameter: OAuth 2.0 token for the current user.
     * @param    prettyPrint    Optional parameter: Returns response with indentations and line breaks.
     * @param    quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param    userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @return    Returns the void response from the API call 
     */
    public void getBillinginfoByAccountIdAndBillingIdAsync(
                final String accountId,
                final String billingId,
                final String alt,
                final String fields,
                final String key,
                final String oauthToken,
                final Boolean prettyPrint,
                final String quotaUser,
                final String userIp,
                final APICallBack<Budget> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/billinginfo/{accountId}/{billingId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4799980230238933154L;
            {
                    put( "accountId", accountId );
                    put( "billingId", billingId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4741529682816129033L;
            {
                    put( "alt", (alt != null) ? alt : "json" );
                    put( "fields", fields );
                    put( "key", key );
                    put( "oauth_token", oauthToken );
                    put( "prettyPrint", (prettyPrint != null) ? prettyPrint : true );
                    put( "quotaUser", quotaUser );
                    put( "userIp", userIp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5186777211829299094L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Budget _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Budget>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.
     * @param    accountId    Required parameter: The account id associated with the budget being updated.
     * @param    billingId    Required parameter: The billing id associated with the budget being updated.
     * @param    body    Required parameter: Example: 
     * @param    alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
     * @param    fields    Optional parameter: Selector specifying which fields to include in a partial response.
     * @param    key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param    oauthToken    Optional parameter: OAuth 2.0 token for the current user.
     * @param    prettyPrint    Optional parameter: Returns response with indentations and line breaks.
     * @param    quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param    userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @return    Returns the void response from the API call 
     */
    public void patchBillinginfoByAccountIdAndBillingIdAsync(
                final String accountId,
                final String billingId,
                final Budget body,
                final String alt,
                final String fields,
                final String key,
                final String oauthToken,
                final Boolean prettyPrint,
                final String quotaUser,
                final String userIp,
                final APICallBack<Budget> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/billinginfo/{accountId}/{billingId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5169391763701581753L;
            {
                    put( "accountId", accountId );
                    put( "billingId", billingId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5500987664897295694L;
            {
                    put( "alt", (alt != null) ? alt : "json" );
                    put( "fields", fields );
                    put( "key", key );
                    put( "oauth_token", oauthToken );
                    put( "prettyPrint", (prettyPrint != null) ? prettyPrint : true );
                    put( "quotaUser", quotaUser );
                    put( "userIp", userIp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5552480498972249901L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Budget _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Budget>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
     * @param    accountId    Required parameter: The account id associated with the budget being updated.
     * @param    billingId    Required parameter: The billing id associated with the budget being updated.
     * @param    body    Required parameter: Example: 
     * @param    alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
     * @param    fields    Optional parameter: Selector specifying which fields to include in a partial response.
     * @param    key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param    oauthToken    Optional parameter: OAuth 2.0 token for the current user.
     * @param    prettyPrint    Optional parameter: Returns response with indentations and line breaks.
     * @param    quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param    userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @return    Returns the void response from the API call 
     */
    public void updateBillinginfoByAccountIdAndBillingIdAsync(
                final String accountId,
                final String billingId,
                final Budget body,
                final String alt,
                final String fields,
                final String key,
                final String oauthToken,
                final Boolean prettyPrint,
                final String quotaUser,
                final String userIp,
                final APICallBack<Budget> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/billinginfo/{accountId}/{billingId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4939174346248297086L;
            {
                    put( "accountId", accountId );
                    put( "billingId", billingId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5054534485880279832L;
            {
                    put( "alt", (alt != null) ? alt : "json" );
                    put( "fields", fields );
                    put( "key", key );
                    put( "oauth_token", oauthToken );
                    put( "prettyPrint", (prettyPrint != null) ? prettyPrint : true );
                    put( "quotaUser", quotaUser );
                    put( "userIp", userIp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5735692812954450037L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Budget _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Budget>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}