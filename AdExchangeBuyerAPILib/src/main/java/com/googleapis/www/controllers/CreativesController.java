/*
 * AdExchangeBuyerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.googleapis.www.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.googleapis.www.*;
import com.googleapis.www.models.*;
import com.googleapis.www.exceptions.*;
import com.googleapis.www.http.client.HttpClient;
import com.googleapis.www.http.client.HttpContext;
import com.googleapis.www.http.request.HttpRequest;
import com.googleapis.www.http.response.HttpResponse;
import com.googleapis.www.http.response.HttpStringResponse;
import com.googleapis.www.http.client.APICallBack;

public class CreativesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static CreativesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CreativesController class 
     */
    public static CreativesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new CreativesController();
            }
        }
        return instance;
    }

    /**
     * Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
     * @param    accountId    Required parameter: The id for the account that will serve this creative.
     * @param    buyerCreativeId    Required parameter: The buyer-specific id for this creative.
     * @param    alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
     * @param    fields    Optional parameter: Selector specifying which fields to include in a partial response.
     * @param    key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param    oauthToken    Optional parameter: OAuth 2.0 token for the current user.
     * @param    prettyPrint    Optional parameter: Returns response with indentations and line breaks.
     * @param    quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param    userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @return    Returns the void response from the API call 
     */
    public void getCreativesByAccountIdAndBuyerCreativeIdAsync(
                final int accountId,
                final String buyerCreativeId,
                final String alt,
                final String fields,
                final String key,
                final String oauthToken,
                final Boolean prettyPrint,
                final String quotaUser,
                final String userIp,
                final APICallBack<Creative> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/creatives/{accountId}/{buyerCreativeId}");

        //process template parameters
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5188599579903829162L;
            {
                    put( "accountId", accountId );
                    put( "buyerCreativeId", buyerCreativeId );
            }});

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4782786000648089543L;
            {
                    put( "alt", (alt != null) ? alt : "json" );
                    put( "fields", fields );
                    put( "key", key );
                    put( "oauth_token", oauthToken );
                    put( "prettyPrint", (prettyPrint != null) ? prettyPrint : true );
                    put( "quotaUser", quotaUser );
                    put( "userIp", userIp );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5541797278504444270L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Creative _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Creative>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Submit a new creative.
     * @param    body    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void insertCreativesAsync(
                final Creative body,
                final APICallBack<Creative> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/creatives");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4948731965146295786L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            Creative _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Creative>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
     * @param    alt    Optional parameter: Data format for the response. (Acceptable values are: "json")
     * @param    fields    Optional parameter: Selector specifying which fields to include in a partial response.
     * @param    key    Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param    oauthToken    Optional parameter: OAuth 2.0 token for the current user.
     * @param    prettyPrint    Optional parameter: Returns response with indentations and line breaks.
     * @param    quotaUser    Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
     * @param    userIp    Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
     * @param    accountId    Optional parameter: When specified, only creatives for the given account ids are returned.
     * @param    buyerCreativeId    Optional parameter: When specified, only creatives for the given buyer creative ids are returned.
     * @param    maxResults    Optional parameter: Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
     * @param    pageToken    Optional parameter: A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.
     * @param    statusFilter    Optional parameter: When specified, only creatives having the given status are returned. (Acceptable values are: "approved", "disapproved", "not_checked")
     * @return    Returns the void response from the API call 
     */
    public void listCreativesAsync(
                final String alt,
                final String fields,
                final String key,
                final String oauthToken,
                final Boolean prettyPrint,
                final String quotaUser,
                final String userIp,
                final Integer accountId,
                final String buyerCreativeId,
                final Integer maxResults,
                final String pageToken,
                final String statusFilter,
                final APICallBack<CreativesList> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/creatives");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5047877588946733418L;
            {
                    put( "alt", (alt != null) ? alt : "json" );
                    put( "fields", fields );
                    put( "key", key );
                    put( "oauth_token", oauthToken );
                    put( "prettyPrint", (prettyPrint != null) ? prettyPrint : true );
                    put( "quotaUser", quotaUser );
                    put( "userIp", userIp );
                    put( "accountId", accountId );
                    put( "buyerCreativeId", buyerCreativeId );
                    put( "maxResults", maxResults );
                    put( "pageToken", pageToken );
                    put( "statusFilter", statusFilter );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4968181157771211521L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CreativesList _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CreativesList>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}