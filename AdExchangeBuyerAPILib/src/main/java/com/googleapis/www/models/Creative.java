/*
 * AdExchangeBuyerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.googleapis.www.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class Creative 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 5391952293768391938L;
    private String hTMLSnippet;
    private Integer accountId;
    private List<String> advertiserId;
    private String advertiserName;
    private String agencyId;
    private List<Integer> attribute;
    private String buyerCreativeId;
    private List<String> clickThroughUrl;
    private List<Correction> corrections;
    private List<DisapprovalReason> disapprovalReasons;
    private FilteringReasons filteringReasons;
    private Integer height;
    private String kind = "adexchangebuyer#creative";
    private List<Integer> productCategories;
    private List<Integer> restrictedCategories;
    private List<Integer> sensitiveCategories;
    private String status;
    private List<Integer> vendorType;
    private String videoURL;
    private Integer width;
    /** GETTER
     * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
     */
    @JsonGetter("HTMLSnippet")
    public String getHTMLSnippet ( ) { 
        return this.hTMLSnippet;
    }
    
    /** SETTER
     * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
     */
    @JsonSetter("HTMLSnippet")
    public void setHTMLSnippet (String value) { 
        this.hTMLSnippet = value;
        notifyObservers(this.hTMLSnippet);
    }
 
    /** GETTER
     * Account id.
     */
    @JsonGetter("accountId")
    public Integer getAccountId ( ) { 
        return this.accountId;
    }
    
    /** SETTER
     * Account id.
     */
    @JsonSetter("accountId")
    public void setAccountId (Integer value) { 
        this.accountId = value;
        notifyObservers(this.accountId);
    }
 
    /** GETTER
     * Detected advertiser id, if any. Read-only. This field should not be set in requests.
     */
    @JsonGetter("advertiserId")
    public List<String> getAdvertiserId ( ) { 
        return this.advertiserId;
    }
    
    /** SETTER
     * Detected advertiser id, if any. Read-only. This field should not be set in requests.
     */
    @JsonSetter("advertiserId")
    public void setAdvertiserId (List<String> value) { 
        this.advertiserId = value;
        notifyObservers(this.advertiserId);
    }
 
    /** GETTER
     * The name of the company being advertised in the creative.
     */
    @JsonGetter("advertiserName")
    public String getAdvertiserName ( ) { 
        return this.advertiserName;
    }
    
    /** SETTER
     * The name of the company being advertised in the creative.
     */
    @JsonSetter("advertiserName")
    public void setAdvertiserName (String value) { 
        this.advertiserName = value;
        notifyObservers(this.advertiserName);
    }
 
    /** GETTER
     * The agency id for this creative.
     */
    @JsonGetter("agencyId")
    public String getAgencyId ( ) { 
        return this.agencyId;
    }
    
    /** SETTER
     * The agency id for this creative.
     */
    @JsonSetter("agencyId")
    public void setAgencyId (String value) { 
        this.agencyId = value;
        notifyObservers(this.agencyId);
    }
 
    /** GETTER
     * All attributes for the ads that may be shown from this snippet.
     */
    @JsonGetter("attribute")
    public List<Integer> getAttribute ( ) { 
        return this.attribute;
    }
    
    /** SETTER
     * All attributes for the ads that may be shown from this snippet.
     */
    @JsonSetter("attribute")
    public void setAttribute (List<Integer> value) { 
        this.attribute = value;
        notifyObservers(this.attribute);
    }
 
    /** GETTER
     * A buyer-specific id identifying the creative in this ad.
     */
    @JsonGetter("buyerCreativeId")
    public String getBuyerCreativeId ( ) { 
        return this.buyerCreativeId;
    }
    
    /** SETTER
     * A buyer-specific id identifying the creative in this ad.
     */
    @JsonSetter("buyerCreativeId")
    public void setBuyerCreativeId (String value) { 
        this.buyerCreativeId = value;
        notifyObservers(this.buyerCreativeId);
    }
 
    /** GETTER
     * The set of destination urls for the snippet.
     */
    @JsonGetter("clickThroughUrl")
    public List<String> getClickThroughUrl ( ) { 
        return this.clickThroughUrl;
    }
    
    /** SETTER
     * The set of destination urls for the snippet.
     */
    @JsonSetter("clickThroughUrl")
    public void setClickThroughUrl (List<String> value) { 
        this.clickThroughUrl = value;
        notifyObservers(this.clickThroughUrl);
    }
 
    /** GETTER
     * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
     */
    @JsonGetter("corrections")
    public List<Correction> getCorrections ( ) { 
        return this.corrections;
    }
    
    /** SETTER
     * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
     */
    @JsonSetter("corrections")
    public void setCorrections (List<Correction> value) { 
        this.corrections = value;
        notifyObservers(this.corrections);
    }
 
    /** GETTER
     * The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
     */
    @JsonGetter("disapprovalReasons")
    public List<DisapprovalReason> getDisapprovalReasons ( ) { 
        return this.disapprovalReasons;
    }
    
    /** SETTER
     * The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
     */
    @JsonSetter("disapprovalReasons")
    public void setDisapprovalReasons (List<DisapprovalReason> value) { 
        this.disapprovalReasons = value;
        notifyObservers(this.disapprovalReasons);
    }
 
    /** GETTER
     * The filtering reasons for the creative. Read-only. This field should not be set in requests.
     */
    @JsonGetter("filteringReasons")
    public FilteringReasons getFilteringReasons ( ) { 
        return this.filteringReasons;
    }
    
    /** SETTER
     * The filtering reasons for the creative. Read-only. This field should not be set in requests.
     */
    @JsonSetter("filteringReasons")
    public void setFilteringReasons (FilteringReasons value) { 
        this.filteringReasons = value;
        notifyObservers(this.filteringReasons);
    }
 
    /** GETTER
     * Ad height.
     */
    @JsonGetter("height")
    public Integer getHeight ( ) { 
        return this.height;
    }
    
    /** SETTER
     * Ad height.
     */
    @JsonSetter("height")
    public void setHeight (Integer value) { 
        this.height = value;
        notifyObservers(this.height);
    }
 
    /** GETTER
     * Resource type.
     */
    @JsonGetter("kind")
    public String getKind ( ) { 
        return this.kind;
    }
    
    /** SETTER
     * Resource type.
     */
    @JsonSetter("kind")
    public void setKind (String value) { 
        this.kind = value;
        notifyObservers(this.kind);
    }
 
    /** GETTER
     * Detected product categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonGetter("productCategories")
    public List<Integer> getProductCategories ( ) { 
        return this.productCategories;
    }
    
    /** SETTER
     * Detected product categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonSetter("productCategories")
    public void setProductCategories (List<Integer> value) { 
        this.productCategories = value;
        notifyObservers(this.productCategories);
    }
 
    /** GETTER
     * All restricted categories for the ads that may be shown from this snippet.
     */
    @JsonGetter("restrictedCategories")
    public List<Integer> getRestrictedCategories ( ) { 
        return this.restrictedCategories;
    }
    
    /** SETTER
     * All restricted categories for the ads that may be shown from this snippet.
     */
    @JsonSetter("restrictedCategories")
    public void setRestrictedCategories (List<Integer> value) { 
        this.restrictedCategories = value;
        notifyObservers(this.restrictedCategories);
    }
 
    /** GETTER
     * Detected sensitive categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonGetter("sensitiveCategories")
    public List<Integer> getSensitiveCategories ( ) { 
        return this.sensitiveCategories;
    }
    
    /** SETTER
     * Detected sensitive categories, if any. Read-only. This field should not be set in requests.
     */
    @JsonSetter("sensitiveCategories")
    public void setSensitiveCategories (List<Integer> value) { 
        this.sensitiveCategories = value;
        notifyObservers(this.sensitiveCategories);
    }
 
    /** GETTER
     * Creative serving status. Read-only. This field should not be set in requests.
     */
    @JsonGetter("status")
    public String getStatus ( ) { 
        return this.status;
    }
    
    /** SETTER
     * Creative serving status. Read-only. This field should not be set in requests.
     */
    @JsonSetter("status")
    public void setStatus (String value) { 
        this.status = value;
        notifyObservers(this.status);
    }
 
    /** GETTER
     * All vendor types for the ads that may be shown from this snippet.
     */
    @JsonGetter("vendorType")
    public List<Integer> getVendorType ( ) { 
        return this.vendorType;
    }
    
    /** SETTER
     * All vendor types for the ads that may be shown from this snippet.
     */
    @JsonSetter("vendorType")
    public void setVendorType (List<Integer> value) { 
        this.vendorType = value;
        notifyObservers(this.vendorType);
    }
 
    /** GETTER
     * The url to fetch a video ad. If set, HTMLSnippet should not be set.
     */
    @JsonGetter("videoURL")
    public String getVideoURL ( ) { 
        return this.videoURL;
    }
    
    /** SETTER
     * The url to fetch a video ad. If set, HTMLSnippet should not be set.
     */
    @JsonSetter("videoURL")
    public void setVideoURL (String value) { 
        this.videoURL = value;
        notifyObservers(this.videoURL);
    }
 
    /** GETTER
     * Ad width.
     */
    @JsonGetter("width")
    public Integer getWidth ( ) { 
        return this.width;
    }
    
    /** SETTER
     * Ad width.
     */
    @JsonSetter("width")
    public void setWidth (Integer value) { 
        this.width = value;
        notifyObservers(this.width);
    }
 
}
 