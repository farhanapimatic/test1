# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

require_relative 'controller_test_base'

class NotesControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def self.startup
    self.controller = @@api_client.notes
  end

  # Create a new note using a title and an optional content body.
  def test_create_new_note_1()
    # Parameters for the API call
    body = CreateNewNoteRequest.from_hash(JSON.parse('{"title":"My new note","body":"This is the body"}'))

    # Perform the API call through the SDK function
    self.class.controller.create_new_note(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 201)
  end

  # Create a new note using a title and an optional content body.
  def test_create_new_note_2()
    # Parameters for the API call
    body = CreateNewNoteRequest.from_hash(JSON.parse('{"title":"My new note","body":"This is the body"}'))

    # Perform the API call through the SDK function
    self.class.controller.create_new_note(body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 201)
  end

  # Get a single note.
  def test_get_note_1()
    # Parameters for the API call
    id = '68a5sdf67'
    body = false

    # Perform the API call through the SDK function
    result = self.class.controller.get_note(id, body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = nil
    expected_headers['x-request-id'] = nil
    expected_headers['x-response-time'] = nil

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    assert_equal('{  "id": 1,  "title": "Grocery list",  "body": "Buy milk"}', @response_catcher.response.raw_body)
  end

  # Update a single note by setting the title and/or body.
  #::: warning
  ##### <i class="fa fa-warning"></i> Caution
  #If the value for `title` or `body` is `null` or `undefined`, then the corresponding value is not modified on the server. However, if you send an empty string instead then it will **permanently overwrite** the original value.
  #:::
  def test_update_a_note_1()
    # Parameters for the API call
    id = '68a5sdf67'
    body = nil

    # Perform the API call through the SDK function
    result = self.class.controller.update_a_note(id, body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 200)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = nil
    expected_headers['x-request-id'] = nil
    expected_headers['x-response-time'] = nil

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    assert_not_nil(result)
    assert_equal('{  "id": 1,  "title": "Grocery list",  "body": "Buy milk"}', @response_catcher.response.raw_body)
  end

  # Delete a single note
  def test_delete_a_note_1()
    # Parameters for the API call
    id = '68a5sdf67'
    body = nil

    # Perform the API call through the SDK function
    self.class.controller.delete_a_note(id, body)

    # Test response code
    assert_equal(@response_catcher.response.status_code, 204)
  end

end
